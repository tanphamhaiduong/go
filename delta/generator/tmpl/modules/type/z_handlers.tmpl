// @generated
{{- $Name := .Module.Name }}
{{- $name := .Module.Name | ToLowerCase }}
{{- $fields := .Module.Fields  }}
package {{ $name }}

import (
	"context"
	"database/sql"

	"github.com/tanphamhaiduong/go/delta/server/arguments"
	"github.com/tanphamhaiduong/go/delta/server/models"
)

// ICoreRepository ...
type ICoreRepository interface {
	GetByID(ctx context.Context, params arguments.{{ $Name }}GetByIDArgs) (models.{{ $Name }}, error)
	GetByIDs(ctx context.Context, params arguments.{{ $Name }}GetByIDsArgs) ([]models.{{ $Name }}, error)
	List(ctx context.Context, params arguments.{{ $Name }}ListArgs) ([]models.{{ $Name }}, error)
	Count(ctx context.Context, params arguments.{{ $Name }}CountArgs) (int64, error)
	Insert(ctx context.Context, params arguments.{{ $Name }}InsertArgs) (models.{{ $Name }}, error)
	Update(ctx context.Context, params arguments.{{ $Name }}UpdateArgs) (models.{{ $Name }}, error)
	Delete(ctx context.Context, params arguments.{{ $Name }}DeleteArgs) (int64, error)
}

// GetByID ...
func (h HandlerImpl) GetByID(ctx context.Context, params arguments.{{ $Name }}GetByIDArgs) (models.{{ $Name }}, error) {
	var (
		{{ $name }} models.{{ $Name }}
	)
	{{ $name }}, err := h.{{ $name }}.GetByID(ctx, params)
	if err != nil {
		return {{ $name }}, err
	}
	return {{ $name }}, nil
}

// GetByIDs ...
func (h HandlerImpl) GetByIDs(ctx context.Context, params arguments.{{ $Name }}GetByIDsArgs) ([]models.{{ $Name }}, error) {
	var (
		{{ $name | ToPlural }} []models.{{ $Name }}
	)
	{{ $name | ToPlural }}, err := h.{{ $name }}.GetByIDs(ctx, params)
	if err != nil {
		return {{ $name | ToPlural }}, err
	}
	return {{ $name | ToPlural }}, nil
}

// Count ...
func (h HandlerImpl) Count(ctx context.Context, params arguments.{{ $Name }}CountArgs) (int64, error) {
	var (
		count int64
	)
	if err := validator.Struct(params); err != nil {
		return count, err
	}
	count, err := h.{{ $name }}.Count(ctx, params)
	if err != nil {
		return count, err
	}
	return count, nil
}

// List ...
func (h HandlerImpl) List(ctx context.Context, params arguments.{{ $Name }}ListArgs) ([]models.{{ $Name }}, error) {
	var (
		{{ $name | ToPlural }} []models.{{ $Name }}
	)
	if err := validator.Struct(params); err != nil {
		return {{ $name | ToPlural }}, err
	}
	{{ $name | ToPlural }}, err := h.{{ $name }}.List(ctx, params)
	if err != nil {
		return {{ $name | ToPlural }}, err
	}
	return {{ $name | ToPlural }}, nil
}

// Insert ...
func (h HandlerImpl) Insert(ctx context.Context, params arguments.{{ $Name }}InsertArgs) (models.{{ $Name }}, error) {
	var (
		{{ $name }} models.{{ $Name }}
	)
	if err := validator.Struct(params); err != nil {
		return {{ $name }}, err
	}
	{{ $name }}, err := h.{{ $name }}.Insert(ctx, params)
	if err != nil {
		return {{ $name }}, err
	}
	return {{ $name }}, nil
}

// Update ...
func (h HandlerImpl) Update(ctx context.Context, params arguments.{{ $Name }}UpdateArgs) (models.{{ $Name }}, error) {
	var (
		{{ $name }} models.{{ $Name }}
	)
	if err := validator.Struct(params); err != nil {
		return {{ $name }}, err
	}
	{{ $name }}, err := h.{{ $name }}.Update(ctx, params)
	if err != nil {
		return {{ $name }}, err
	}
	return {{ $name }}, nil
}

// Delete ...
func (h HandlerImpl) Delete(ctx context.Context, params arguments.{{ $Name }}DeleteArgs) (int64, error) {
	var (
		id int64
	)
	if err := validator.Struct(params); err != nil {
		return id, err
	}
	id, err := h.{{ $name }}.Delete(ctx, params)
	if err != nil {
		return id, err
	}
	return id, nil
}

//go:generate mockery -name=IRepository -output=mocks -case=underscore
