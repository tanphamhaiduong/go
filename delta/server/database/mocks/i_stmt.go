// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import database "github.com/tanphamhaiduong/go/delta/server/database"
import mock "github.com/stretchr/testify/mock"

// IStmt is an autogenerated mock type for the IStmt type
type IStmt struct {
	mock.Mock
}

// ExecContext provides a mock function with given fields: ctx, args
func (_m *IStmt) ExecContext(ctx context.Context, args ...interface{}) (database.IResult, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 database.IResult
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) database.IResult); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.IResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryContext provides a mock function with given fields: ctx, args
func (_m *IStmt) QueryContext(ctx context.Context, args ...interface{}) (database.IRows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 database.IRows
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) database.IRows); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.IRows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRowContext provides a mock function with given fields: ctx, args
func (_m *IStmt) QueryRowContext(ctx context.Context, args ...interface{}) database.IRow {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 database.IRow
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) database.IRow); ok {
		r0 = rf(ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.IRow)
		}
	}

	return r0
}
