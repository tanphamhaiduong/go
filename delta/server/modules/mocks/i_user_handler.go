// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import arguments "github.com/tanphamhaiduong/go/delta/server/arguments"
import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/tanphamhaiduong/go/delta/server/models"

// IUserHandler is an autogenerated mock type for the IUserHandler type
type IUserHandler struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, params
func (_m *IUserHandler) Count(ctx context.Context, params arguments.UserCountArgs) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserCountArgs) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserCountArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, params
func (_m *IUserHandler) Delete(ctx context.Context, params arguments.UserDeleteArgs) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserDeleteArgs) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserDeleteArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, params
func (_m *IUserHandler) GetByID(ctx context.Context, params arguments.UserGetByIDArgs) (models.User, error) {
	ret := _m.Called(ctx, params)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserGetByIDArgs) models.User); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserGetByIDArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, params
func (_m *IUserHandler) Insert(ctx context.Context, params arguments.UserInsertArgs) (models.User, error) {
	ret := _m.Called(ctx, params)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserInsertArgs) models.User); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserInsertArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, params
func (_m *IUserHandler) List(ctx context.Context, params arguments.UserListArgs) ([]models.User, error) {
	ret := _m.Called(ctx, params)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserListArgs) []models.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserListArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *IUserHandler) Update(ctx context.Context, params arguments.UserUpdateArgs) (models.User, error) {
	ret := _m.Called(ctx, params)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserUpdateArgs) models.User); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserUpdateArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
