// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import arguments "github.com/tanphamhaiduong/go/delta/server/arguments"
import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/tanphamhaiduong/go/delta/server/models"

// IRoleFeatureHandler is an autogenerated mock type for the IRoleFeatureHandler type
type IRoleFeatureHandler struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, params
func (_m *IRoleFeatureHandler) Count(ctx context.Context, params arguments.RoleFeatureCountArgs) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RoleFeatureCountArgs) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RoleFeatureCountArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, params
func (_m *IRoleFeatureHandler) Delete(ctx context.Context, params arguments.RoleFeatureDeleteArgs) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RoleFeatureDeleteArgs) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RoleFeatureDeleteArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, params
func (_m *IRoleFeatureHandler) GetByID(ctx context.Context, params arguments.RoleFeatureGetByIDArgs) (models.RoleFeature, error) {
	ret := _m.Called(ctx, params)

	var r0 models.RoleFeature
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RoleFeatureGetByIDArgs) models.RoleFeature); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.RoleFeature)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RoleFeatureGetByIDArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, params
func (_m *IRoleFeatureHandler) Insert(ctx context.Context, params arguments.RoleFeatureInsertArgs) (models.RoleFeature, error) {
	ret := _m.Called(ctx, params)

	var r0 models.RoleFeature
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RoleFeatureInsertArgs) models.RoleFeature); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.RoleFeature)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RoleFeatureInsertArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, params
func (_m *IRoleFeatureHandler) List(ctx context.Context, params arguments.RoleFeatureListArgs) ([]models.RoleFeature, error) {
	ret := _m.Called(ctx, params)

	var r0 []models.RoleFeature
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RoleFeatureListArgs) []models.RoleFeature); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RoleFeature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RoleFeatureListArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *IRoleFeatureHandler) Update(ctx context.Context, params arguments.RoleFeatureUpdateArgs) (models.RoleFeature, error) {
	ret := _m.Called(ctx, params)

	var r0 models.RoleFeature
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RoleFeatureUpdateArgs) models.RoleFeature); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.RoleFeature)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RoleFeatureUpdateArgs) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
