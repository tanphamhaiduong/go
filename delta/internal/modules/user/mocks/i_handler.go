// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	arguments "github.com/tanphamhaiduong/go/delta/internal/arguments"

	mock "github.com/stretchr/testify/mock"

	models "github.com/tanphamhaiduong/go/delta/internal/models"
)

// IHandler is an autogenerated mock type for the IHandler type
type IHandler struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, params
func (_m *IHandler) Count(ctx context.Context, params arguments.UserCount) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserCount) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserCount) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, param
func (_m *IHandler) Delete(ctx context.Context, param arguments.UserDelete) (int64, error) {
	ret := _m.Called(ctx, param)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserDelete) int64); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserDelete) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, param
func (_m *IHandler) GetByID(ctx context.Context, param arguments.UserGetByID) (models.User, error) {
	ret := _m.Called(ctx, param)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserGetByID) models.User); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserGetByID) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ctx, param
func (_m *IHandler) GetByIDs(ctx context.Context, param arguments.UserGetByIDs) ([]models.User, error) {
	ret := _m.Called(ctx, param)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserGetByIDs) []models.User); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserGetByIDs) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, params
func (_m *IHandler) Insert(ctx context.Context, params arguments.UserInsert) (models.User, error) {
	ret := _m.Called(ctx, params)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserInsert) models.User); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserInsert) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, params
func (_m *IHandler) List(ctx context.Context, params arguments.UserList) ([]models.User, error) {
	ret := _m.Called(ctx, params)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserList) []models.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserList) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, param
func (_m *IHandler) Login(ctx context.Context, param arguments.UserLogin) (string, error) {
	ret := _m.Called(ctx, param)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserLogin) string); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserLogin) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *IHandler) Update(ctx context.Context, params arguments.UserUpdate) (models.User, error) {
	ret := _m.Called(ctx, params)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, arguments.UserUpdate) models.User); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.UserUpdate) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
