// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import arguments "github.com/tanphamhaiduong/go/delta/internal/arguments"
import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/tanphamhaiduong/go/delta/internal/models"

// IHandler is an autogenerated mock type for the IHandler type
type IHandler struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, params
func (_m *IHandler) Count(ctx context.Context, params arguments.RolePermissionCount) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RolePermissionCount) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RolePermissionCount) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, param
func (_m *IHandler) Delete(ctx context.Context, param arguments.RolePermissionDelete) (int64, error) {
	ret := _m.Called(ctx, param)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RolePermissionDelete) int64); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RolePermissionDelete) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, param
func (_m *IHandler) GetByID(ctx context.Context, param arguments.RolePermissionGetByID) (models.RolePermission, error) {
	ret := _m.Called(ctx, param)

	var r0 models.RolePermission
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RolePermissionGetByID) models.RolePermission); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(models.RolePermission)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RolePermissionGetByID) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ctx, param
func (_m *IHandler) GetByIDs(ctx context.Context, param arguments.RolePermissionGetByIDs) ([]models.RolePermission, error) {
	ret := _m.Called(ctx, param)

	var r0 []models.RolePermission
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RolePermissionGetByIDs) []models.RolePermission); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RolePermission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RolePermissionGetByIDs) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoleID provides a mock function with given fields: ctx, roleID
func (_m *IHandler) GetByRoleID(ctx context.Context, roleID int64) ([]models.RolePermission, error) {
	ret := _m.Called(ctx, roleID)

	var r0 []models.RolePermission
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.RolePermission); ok {
		r0 = rf(ctx, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RolePermission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, params
func (_m *IHandler) Insert(ctx context.Context, params arguments.RolePermissionInsert) (models.RolePermission, error) {
	ret := _m.Called(ctx, params)

	var r0 models.RolePermission
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RolePermissionInsert) models.RolePermission); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.RolePermission)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RolePermissionInsert) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, params
func (_m *IHandler) List(ctx context.Context, params arguments.RolePermissionList) ([]models.RolePermission, error) {
	ret := _m.Called(ctx, params)

	var r0 []models.RolePermission
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RolePermissionList) []models.RolePermission); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RolePermission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RolePermissionList) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *IHandler) Update(ctx context.Context, params arguments.RolePermissionUpdate) (models.RolePermission, error) {
	ret := _m.Called(ctx, params)

	var r0 models.RolePermission
	if rf, ok := ret.Get(0).(func(context.Context, arguments.RolePermissionUpdate) models.RolePermission); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.RolePermission)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.RolePermissionUpdate) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
