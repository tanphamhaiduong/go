// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	arguments "github.com/tanphamhaiduong/go/delta/internal/arguments"

	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/tanphamhaiduong/go/delta/internal/models"
)

// IHandler is an autogenerated mock type for the IHandler type
type IHandler struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, params
func (_m *IHandler) Count(ctx context.Context, params arguments.CompanyCount) (int64, error) {
	ret := _m.Called(ctx, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.CompanyCount) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.CompanyCount) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, param
func (_m *IHandler) Delete(ctx context.Context, param arguments.CompanyDelete) (int64, error) {
	ret := _m.Called(ctx, param)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, arguments.CompanyDelete) int64); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.CompanyDelete) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, param
func (_m *IHandler) GetByID(ctx context.Context, param arguments.CompanyGetByID) (models.Company, error) {
	ret := _m.Called(ctx, param)

	var r0 models.Company
	if rf, ok := ret.Get(0).(func(context.Context, arguments.CompanyGetByID) models.Company); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.CompanyGetByID) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ctx, param
func (_m *IHandler) GetByIDs(ctx context.Context, param arguments.CompanyGetByIDs) ([]models.Company, error) {
	ret := _m.Called(ctx, param)

	var r0 []models.Company
	if rf, ok := ret.Get(0).(func(context.Context, arguments.CompanyGetByIDs) []models.Company); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.CompanyGetByIDs) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, params
func (_m *IHandler) Insert(ctx context.Context, params arguments.CompanyInsert) (models.Company, error) {
	ret := _m.Called(ctx, params)

	var r0 models.Company
	if rf, ok := ret.Get(0).(func(context.Context, arguments.CompanyInsert) models.Company); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.CompanyInsert) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, params
func (_m *IHandler) List(ctx context.Context, params arguments.CompanyList) ([]models.Company, error) {
	ret := _m.Called(ctx, params)

	var r0 []models.Company
	if rf, ok := ret.Get(0).(func(context.Context, arguments.CompanyList) []models.Company); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.CompanyList) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, params
func (_m *IHandler) Update(ctx context.Context, params arguments.CompanyUpdate) (models.Company, error) {
	ret := _m.Called(ctx, params)

	var r0 models.Company
	if rf, ok := ret.Get(0).(func(context.Context, arguments.CompanyUpdate) models.Company); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(models.Company)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, arguments.CompanyUpdate) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
