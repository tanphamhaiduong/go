// @generated
{{- $Modules := .Modules }}
package modules

import (
	"database/sql"

	"github.com/tanphamhaiduong/go/delta/internal/database"
	{{- range $Module := $Modules }}
		"github.com/tanphamhaiduong/go/delta/internal/modules/{{ $Module.Name | ToLowerCase }}"
	{{- end }}
)

// ICoreResolver ...
type IResolver interface {
	ForwardParams(p graphql.ResolveParams) (interface{}, error)
	GetByID(p graphql.ResolveParams) (interface{}, error)
	Count(p graphql.ResolveParams) (interface{}, error)
	List(p graphql.ResolveParams) (interface{}, error)
	Insert(p graphql.ResolveParams) (interface{}, error)
	Update(p graphql.ResolveParams) (interface{}, error)
	Delete(p graphql.ResolveParams) (interface{}, error)
}

// Resolver ...
type Resolver struct {
	{{- range $Module := $Modules }}
		{{ $Module.Name }} I{{ $Module.Name }}Resolver
	{{- end }}
}

func addToSchema(resolver Resolver){
	{{- range $Module := $Modules }}
		rootQuery.AddFieldConfig("{{ $Module.Name | ToLowerCamelCase }}", &graphql.Field{
			Type:        {{ $Module.Name | ToLowerCase }}.Type,
			Description: "This is GetByID for {{ $Module.Name | ToLowerCamelCase }}",
			Args:        {{ $Module.Name | ToLowerCase }}.GetByIDTypeArgs,
			Resolve:     resolver.{{ $Module.Name }}.GetByID,
		})
		rootQuery.AddFieldConfig("{{ $Module.Name | ToLowerCamelCase | ToPlural }}", &graphql.Field{
			Type: graphql.NewObject(graphql.ObjectConfig{
				Name:        "{{ $Module.Name | ToPlural }}",
				Description: "This is type {{ $Module.Name | ToLowerCamelCase | ToPlural }}",
				Fields: graphql.Fields{
					"records": &graphql.Field{
						Type:        graphql.NewNonNull(graphql.NewList({{ $Module.Name | ToLowerCase }}.Type)),
						Description: "This is records of {{ $Module.Name | ToLowerCamelCase | ToPlural }}",
						Resolve:     resolver.{{ $Module.Name }}.List,
					},
					"totalRecords": &graphql.Field{
						Type:        graphql.NewNonNull(graphql.Int),
						Description: "This is totalRecords of {{ $Module.Name | ToLowerCamelCase | ToPlural }} query",
						Resolve:     resolver.{{ $Module.Name }}.Count,
					},
				},
			}),
			Description: "This is get list of {{ $Module.Name | ToLowerCamelCase }} query",
			Args:        {{ $Module.Name | ToLowerCase }}.ListTypeArgs,
			Resolve:     resolver.{{ $Module.Name }}.ForwardParams,
		})
		rootMutation.AddFieldConfig("insert{{ $Module.Name }}", &graphql.Field{
			Type:        {{ $Module.Name | ToLowerCase }}.Type,
			Description: "This is insert {{ $Module.Name | ToLowerCamelCase }} query",
			Args:        {{ $Module.Name | ToLowerCase }}.InsertTypeArgs,
			Resolve:     resolver.{{ $Module.Name }}.Insert,
		})
		rootMutation.AddFieldConfig("update{{ $Module.Name }}", &graphql.Field{
			Type:        {{ $Module.Name | ToLowerCase }}.Type,
			Description: "This is update {{ $Module.Name | ToLowerCamelCase }} query",
			Args:        {{ $Module.Name | ToLowerCase }}.UpdateTypeArgs,
			Resolve:     resolver.{{ $Module.Name }}.Update,
		})
		rootMutation.AddFieldConfig("delete{{ $Module.Name }}", &graphql.Field{
			Type:        graphql.NewNonNull(graphql.Int),
			Description: "This is delete {{ $Module.Name | ToLowerCamelCase }} query",
			Args:        {{ $Module.Name | ToLowerCase }}.DeleteTypeArgs,
			Resolve:     resolver.{{ $Module.Name }}.Delete,
		})
	{{- end }}
}

// NewResolver ...
func NewResolver({{- range $Module := $Modules }}{{ $Module.Name | ToLowerCase }} I{{ $Module.Name }}Resolver,{{- end }}) Resolver {
	return Resolver{
		{{- range $Module := $Modules }}
		  {{ $Module.Name }}: {{ $Module.Name | ToLowerCase }},
        {{- end }}
	}
}
