// @generated
{{- $Name := .Module.Name }}
{{- $name := .Module.Name | ToLowerCase }}
{{- $name_module := .Module.Name | ToSnakeCase }}
{{- $fields := .Module.Fields  }}
{{- $names := $name | ToPlural }}
package {{ $name }}

import (
	"context"
	"database/sql"

	sq "github.com/Masterminds/squirrel"
	"github.com/tanphamhaiduong/go/delta/internal/utils"
	"github.com/tanphamhaiduong/go/delta/internal/arguments"
	"github.com/tanphamhaiduong/go/delta/internal/models"
)

// GetByID ...
func (r *RepositoryImpl) GetByID(ctx context.Context, params arguments.{{ $Name }}GetByIDArgs) (models.{{ $Name }}, error) {
	var (
		{{ $name }} models.{{ $Name }}
		selectBuilder = sq.Select(
		{{- range $field := $fields }}
      "{{ $field.Name | ToSnakeCase }}",
    {{- end }}
		).From("{{ $name_module }}").Where(sq.Eq{"id": params.ID})
	)
	sql, args, err := selectBuilder.ToSql()
	if err != nil {
		return {{ $name }}, err
	}
	stmt, err := r.db.PrepareContext(ctx, sql)
	if err != nil {
		return {{ $name }}, err
	}
	row := stmt.QueryRowContext(ctx, args...)
	err = row.Scan(
	{{- range $field := $fields }}
		&{{ $name }}.{{ $field.Name }},
	{{- end }}
	)
	if err != nil {
		return {{ $name }}, err
	}
	return {{ $name }}, nil
}

// GetByIDs ...
func (r *RepositoryImpl) GetByIDs(ctx context.Context, params arguments.{{ $Name }}GetByIDsArgs) ([]models.{{- $Name -}}, error) {
	var (
		{{ $names }} []models.{{- $Name }}
		selectBuilder = sq.Select(
		{{- range $field := $fields }}
      "{{ $field.Name | ToSnakeCase }}",
    {{- end }}
    ).From("{{- $name_module }}").Where(sq.Eq{"id": params.IDs})
	)
	sql, args, err := selectBuilder.ToSql()
	if err != nil {
		return {{ $names }}, err
	}
	stmt, err := r.db.PrepareContext(ctx, sql)
	if err != nil {
		return {{ $names }}, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return {{ $names }}, err
	}
	defer rows.Close()
	for rows.Next() {
		{{ $name }} := models.{{ $Name }}{}
		err := rows.Scan(
			{{- range $field := $fields }}
				&{{ $name }}.{{- $field.Name }},
			{{- end }}
		)
		if err != nil {
			return {{ $names }}, err
		}
		{{ $names }} = append({{ $names }}, {{ $name }})
	}
	return {{ $names }}, nil
}

// setArgsToListSelectBuilder ...
func (r *RepositoryImpl) setArgsToListSelectBuilder(selectBuilder sq.SelectBuilder, params arguments.{{ $Name }}ListArgs) sq.SelectBuilder {
	{{- range $field := $fields }}
		if params.{{- $field.Name }} != {{- if $field.IsInt64 }}0{{ else }}""{{ end }} {
			selectBuilder = selectBuilder.Where(sq.{{ $field.QueryType }}{"{{ $field.Name | ToSnakeCase }}": params.{{ $field.Name }}})
		}
	{{- end }}
	if params.PageSize != 0 {
		selectBuilder = selectBuilder.Limit(uint64(params.PageSize))
	}
	if params.Page != 0 {
		offset := utils.CalculateOffsetForPage(params.Page, params.PageSize)
		selectBuilder = selectBuilder.Offset(uint64(offset))
	}
	return selectBuilder
}

// List ...
func (r *RepositoryImpl) List(ctx context.Context, params arguments.{{- $Name }}ListArgs) ([]models.{{ $Name }}, error) {
	var (
		{{ $names }} []models.{{ $Name }}
		selectBuilder = sq.Select(
		{{- range $field := $fields }}
      "{{ $field.Name | ToSnakeCase }}",
    {{- end }}
		).From("{{- $name_module }}")
	)
	selectBuilderWithArgs := r.setArgsToListSelectBuilder(selectBuilder, params)
	sql, args, err := selectBuilderWithArgs.ToSql()
	if err != nil {
		return {{ $names }}, err
	}
	stmt, err := r.db.PrepareContext(ctx, sql)
	if err != nil {
		return {{ $names }}, err
	}
	rows, err := stmt.QueryContext(ctx, args...)
	if err != nil {
		return {{ $names }}, err
	}
	defer rows.Close()
	for rows.Next() {
		{{ $name }} := models.{{ $Name }}{}
		err := rows.Scan(
			{{- range $field := $fields }}
				&{{ $name }}.{{- $field.Name }},
			{{- end }}
		)
		if err != nil {
			return {{ $names }}, err
		}
		{{ $names }} = append({{ $names }}, {{ $name }})
	}
	return {{ $names }}, nil
}

// setArgsToCountSelectBuilder ...
func (r *RepositoryImpl) setArgsToCountSelectBuilder(selectBuilder sq.SelectBuilder, params arguments.{{ $Name }}CountArgs) sq.SelectBuilder {
	{{- range $field := $fields }}
		if params.{{ $field.Name }} != {{ if $field.IsInt64 }}0{{ else }}""{{- end }} {
			selectBuilder = selectBuilder.Where(sq.{{ $field.QueryType }}{"{{- $field.Name | ToSnakeCase }}": params.{{ $field.Name }}})
		}
	{{- end }}
	return selectBuilder
}

// Count ...
func (r *RepositoryImpl) Count(ctx context.Context, params arguments.{{- $Name }}CountArgs) (int64, error) {
	var (
		count         int64
		selectBuilder = sq.Select("COUNT(id)").From("{{- $name_module }}")
	)
	selectBuilderWithArgs := r.setArgsToCountSelectBuilder(selectBuilder, params)
	sql, args, err := selectBuilderWithArgs.ToSql()
	if err != nil {
		return count, err
	}
	stmt, err := r.db.PrepareContext(ctx, sql)
	if err != nil {
		return count, err
	}
	row := stmt.QueryRowContext(ctx, args...)
	err = row.Scan(&count)
	if err != nil {
		return count, err
	}
	return count, nil
}

// Insert ...
func (r *RepositoryImpl) Insert(ctx context.Context, params arguments.{{ $Name }}InsertArgs) (models.{{ $Name }}, error) {
	var (
		{{ $name }} models.{{ $Name }}
		insertBuilder = sq.Insert("{{- $name_module }}").Columns(
			{{- range $field := $fields }}
				{{- if $field.IsNotIDField }}
					"{{ $field.Name | ToSnakeCase }}",
				{{- end }}
			{{- end }}
		).Values(
			{{- range $field := $fields }}
				{{- if $field.IsNotIDField }}
					params.{{ $field.Name }},
				{{- end }}
			{{- end }}
		)
	)
	sql, args, err := insertBuilder.ToSql()
	if err != nil {
		return {{ $name }}, err
	}
	stmt, err := r.db.PrepareContext(ctx, sql)
	if err != nil {
		return {{ $name }}, err
	}
	row, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		return {{ $name }}, err
	}
	id, err := row.LastInsertId()
	if err != nil {
		return {{ $name }}, err
	}
	new{{ $Name }}, err := r.GetByID(ctx, arguments.{{ $Name }}GetByIDArgs{ID: id})
	if err != nil {
		return {{ $name }}, err
	}
	return new{{ $Name }}, nil
}

// setArgsToUpdateBuilder ...
func (r *RepositoryImpl) setArgsToUpdateBuilder(updateBuilder sq.UpdateBuilder, params arguments.{{ $Name }}UpdateArgs) sq.UpdateBuilder {
	{{- range $field := $fields }}
		{{- if $field.IsNotIDField }}
			if params.{{- $field.Name }} != nil {
				updateBuilder = updateBuilder.Set("{{ $field.Name | ToSnakeCase }}", *params.{{- $field.Name }})
			}
		{{ end }}
	{{- end }}
	return updateBuilder
}

// Update ...
func (r *RepositoryImpl) Update(ctx context.Context, params arguments.{{ $Name }}UpdateArgs) (models.{{ $Name }}, error) {
	var (
		{{ $name }}    models.{{ $Name }}
		updateBuilder = sq.Update("{{- $name_module }}").Where(sq.Eq{"id": *params.ID})
	)
	updateBuilderWithArgs := r.setArgsToUpdateBuilder(updateBuilder, params)

	sql, args, err := updateBuilderWithArgs.ToSql()
	if err != nil {
		return {{ $name }}, err
	}
	stmt, err := r.db.PrepareContext(ctx, sql)
	if err != nil {
		return {{ $name }}, err
	}
		result, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		return {{ $name }}, err
	}
	rowAffected, err := result.RowsAffected()
	if err != nil {
		return {{ $name }}, err
	}
	if rowAffected == 0 {
		return {{ $name }}, fmt.Errorf("error when update record id %d", *params.ID)
	}
	new{{ $Name }}, err := r.GetByID(ctx, arguments.{{ $Name }}GetByIDArgs{ID: *params.ID})
	if err != nil {
		return {{ $name }}, err
	}
	return new{{ $Name }}, nil
}

// Delete ...
func (r *RepositoryImpl) Delete(ctx context.Context, params arguments.{{ $Name }}DeleteArgs) (int64, error) {
	var (
		id            int64
		deleteBuilder = sq.Delete("{{ $name_module }}").Where(sq.Eq{"id": params.ID})
	)
	sql, args, err := deleteBuilder.ToSql()
	if err != nil {
		return id, err
	}
	stmt, err := r.db.PrepareContext(ctx, sql)
	if err != nil {
		return id, err
	}
	result, err := stmt.ExecContext(ctx, args...)
	if err != nil {
		return id, err
	}
	rowAffected, err := result.RowsAffected()
	if rowAffected == 0 {
		return id, fmt.Errorf("not found record by id %d", params.ID)
	}
	return params.ID, nil
}

//go:generate mockery -name=IDatabase -output=mocks -case=underscore
