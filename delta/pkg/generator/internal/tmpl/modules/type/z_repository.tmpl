// @generated
{{- $Name := .Module.Name }}
{{- $name := .Module.Name | ToLowerCase }}
{{- $name_module := .Module.Name | ToSnakeCase }}
{{- $fields := .Module.Fields  }}
{{- $names := $name | ToPlural }}
package {{ $name }}

import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
	"github.com/afex/hystrix-go/hystrix"
	"github.com/tanphamhaiduong/go/common/logger"
	"github.com/tanphamhaiduong/go/delta/internal/arguments"
	"github.com/tanphamhaiduong/go/delta/internal/database"
	"github.com/tanphamhaiduong/go/delta/internal/models"
	"github.com/tanphamhaiduong/go/delta/internal/utils"
)

//scan{{ $Name }}
func (r *RepositoryImpl) scan{{ $Name }}(row database.IRow, {{ $name }} *models.{{ $Name }}) error {
	err := row.Scan(
	{{- range $field := $fields }}
		&{{ $name }}.{{ $field.Name }},
	{{- end }}
	)
	return err
}

// GetByID ...
func (r *RepositoryImpl) GetByID(ctx context.Context, params arguments.{{ $Name }}GetByID) (models.{{ $Name }}, error) {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository GetByID of {{ $name }}")
	var (
		{{ $name }} models.{{ $Name }}
		selectBuilder = sq.Select(
		{{- range $field := $fields }}
      "{{ $field.Name | ToSnakeCase }}",
    {{- end }}
		).From("{{ $name_module }}").Where(sq.Eq{"id": params.ID})
	)
	sql, args, err := selectBuilder.ToSql()
	logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
  	"SQL": sql,
  	"Args": args,
  }).Infof("Repository GetByID build sql string of {{ $name }}")
	if err != nil {
	  logger.WithFields(logger.Fields{
			"traceId": ctx.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Repository GetByID selectBuilder error of {{ $name }}")
		return {{ $name }}, err
	}
	output := make(chan models.{{ $Name }}, 1)
	errors := hystrix.Go("{{ $name }}GetByID", func() error {
		stmt, err := r.db.PrepareContext(ctx, sql)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository GetByID PrepareContext error of {{ $name }}")
			return err
		}
		row := stmt.QueryRowContext(ctx, args...)
		err = r.scan{{ $Name }}(row, &{{ $name }})
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository GetByID Scan error of {{ $name }}")
			return err
		}
		output <- {{ $name }}
		return nil
	}, nil)

	select {
	case err := <-errors:
		return {{ $name }}, err
	case out := <-output:
		return out, nil
	}
}

// GetByIDs ...
func (r *RepositoryImpl) GetByIDs(ctx context.Context, params arguments.{{ $Name }}GetByIDs) ([]models.{{- $Name -}}, error) {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository GetByIDs of {{ $name }}")
	var (
		{{ $names }} []models.{{- $Name }}
		selectBuilder = sq.Select(
		{{- range $field := $fields }}
      "{{ $field.Name | ToSnakeCase }}",
    {{- end }}
    ).From("{{- $name_module }}").Where(sq.Eq{"id": params.IDs})
	)
	sql, args, err := selectBuilder.ToSql()
	logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
    "SQL": sql,
    "Args": args,
  }).Infof("Repository GetByIDs build sql string of {{ $name }}")
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": ctx.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Repository GetByIDs selectBuilder error of {{ $name }}")
		return {{ $names }}, err
	}
	output := make(chan []models.{{ $Name }}, 1)
	errors := hystrix.Go("{{ $name }}GetByIDs", func() error {
		stmt, err := r.db.PrepareContext(ctx, sql)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository GetByIDs PrepareContext error of {{ $name }}")
			return err
		}
		rows, err := stmt.QueryContext(ctx, args...)
		defer rows.Close()
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository GetByIDs QueryContext error of {{ $name }}")
			return err
		}
		for rows.Next() {
			{{ $name }} := models.{{ $Name }}{}
			err := r.scan{{ $Name }}(rows, &{{ $name }})
			if err != nil {
				logger.WithFields(logger.Fields{
					"traceId": ctx.Value(utils.TraceIDKey),
					"Error": err,
				}).Errorf("Repository GetByIDs Scan error of {{ $name }}")
				return err
			}
			{{ $names }} = append({{ $names }}, {{ $name }})
		}
		output <- {{ $names }}
		return nil
	}, nil)

	select {
		case err := <-errors:
			return {{ $names }}, err
		case out := <-output:
			return out, nil
	}
}

// setArgsToListSelectBuilder ...
func (r *RepositoryImpl) setArgsToListSelectBuilder(ctx context.Context,selectBuilder sq.SelectBuilder, params arguments.{{ $Name }}List) sq.SelectBuilder {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository setArgsToListSelectBuilder of {{ $name }}")
	{{- range $field := $fields }}
		if
			{{- if $field.IsNullTimeField }}
				value, _ := params.{{- $field.Name }}.Value(); value != nil
			{{- else }}
				params.{{- $field.Name }} !=
					{{- if $field.IsInt64 }}0
					{{- else }}""
					{{- end }}
			{{- end }}{
			selectBuilder = selectBuilder.Where(sq.{{ $field.QueryType }}{"{{ $field.Name | ToSnakeCase }}": params.{{ $field.Name }}})
		}
	{{- end }}
	if params.PageSize != 0 {
		selectBuilder = selectBuilder.Limit(uint64(params.PageSize))
	}
	if params.EndID != 0 {
		selectBuilder = selectBuilder.Where(sq.Lt{"id": params.EndID})
	}
	if params.BeginID != 0 {
		selectBuilder = selectBuilder.Where(sq.Gt{"id": params.BeginID})
	}
	return selectBuilder
}

// List ...
func (r *RepositoryImpl) List(ctx context.Context, params arguments.{{- $Name }}List) ([]models.{{ $Name }}, error) {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository List of {{ $name }}")
	var (
		{{ $names }} []models.{{ $Name }}
		selectBuilder = sq.Select(
		{{- range $field := $fields }}
      "{{ $field.Name | ToSnakeCase }}",
    {{- end }}
		).From("{{- $name_module }}")
	)
	selectBuilderWithArgs := r.setArgsToListSelectBuilder(ctx, selectBuilder, params)
	sql, args, err := selectBuilderWithArgs.ToSql()
	logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
    "SQL": sql,
    "Args": args,
  }).Infof("Repository List build sql string of {{ $name }}")
	if err != nil {
    logger.WithFields(logger.Fields{
			"traceId": ctx.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Repository List selectBuilderWithArgs error of {{ $name }}")
		return {{ $names }}, err
	}
	output := make(chan []models.{{ $Name }}, 1)
	errors := hystrix.Go("{{ $name }}List", func() error {
		stmt, err := r.db.PrepareContext(ctx, sql)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository List PrepareContext error of {{ $name }}")
			return err
		}
		rows, err := stmt.QueryContext(ctx, args...)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository List QueryContext error of {{ $name }}")
			return err
		}
		defer rows.Close()
		for rows.Next() {
			{{ $name }} := models.{{ $Name }}{}
			err := r.scan{{ $Name }}(rows, &{{ $name }})
			if err != nil {
				logger.WithFields(logger.Fields{
					"traceId": ctx.Value(utils.TraceIDKey),
					"Error": err,
				}).Errorf("Repository List Scan error of {{ $name }}")
				return err
			}
			{{ $names }} = append({{ $names }}, {{ $name }})
		}
		output <- {{ $names }}
		return nil
	}, nil)


	select {
		case err := <-errors:
			return {{ $names }}, err
		case out := <-output:
			return out, nil
	}
}

// setArgsToCountSelectBuilder ...
func (r *RepositoryImpl) setArgsToCountSelectBuilder(ctx context.Context,selectBuilder sq.SelectBuilder, params arguments.{{ $Name }}Count) sq.SelectBuilder {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository setArgsToCountSelectBuilder of {{ $name }}")
	{{- range $field := $fields }}
		if
			{{- if $field.IsNullTimeField }}
				value, _ := params.{{- $field.Name }}.Value(); value != nil
			{{- else }}
				params.{{- $field.Name }} !=
					{{- if $field.IsInt64 }}0
					{{- else }}""
					{{- end }}
			{{- end }}{
			selectBuilder = selectBuilder.Where(sq.{{ $field.QueryType }}{"{{ $field.Name | ToSnakeCase }}": params.{{ $field.Name }}})
		}
	{{- end }}
	return selectBuilder
}

// Count ...
func (r *RepositoryImpl) Count(ctx context.Context, params arguments.{{- $Name }}Count) (int64, error) {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository Count of {{ $name }}")
	var (
		count         int64
		selectBuilder = sq.Select("COUNT(id)").From("{{- $name_module }}")
	)
	selectBuilderWithArgs := r.setArgsToCountSelectBuilder(ctx, selectBuilder, params)
	sql, args, err := selectBuilderWithArgs.ToSql()
	logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
    "SQL": sql,
    "Args": args,
  }).Infof("Repository Count build sql string of {{ $name }}")
	if err != nil {
    logger.WithFields(logger.Fields{
			"traceId": ctx.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Repository Count selectBuilderWithArgs error of {{ $name }}")
		return count, err
	}
	output := make(chan int64, 1)
	errors := hystrix.Go("{{ $name }}Count", func() error {
		stmt, err := r.db.PrepareContext(ctx, sql)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Count PrepareContext error of {{ $name }}")
			return err
		}
		row := stmt.QueryRowContext(ctx, args...)
		err = row.Scan(&count)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Count Scan error of {{ $name }}")
			return err
		}
		output <- count
		return nil
	}, nil)


	select {
		case err := <-errors:
			return count, err
		case out := <-output:
			return out, nil
	}
}

// Insert ...
func (r *RepositoryImpl) Insert(ctx context.Context, params arguments.{{ $Name }}Insert) (models.{{ $Name }}, error) {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository Insert of {{ $name }}")
	var (
		{{ $name }} models.{{ $Name }}
		insertBuilder = sq.Insert("{{- $name_module }}").Columns(
			{{- range $field := $fields }}
				{{- if not $field.IsIDField }}
					"{{ $field.Name | ToSnakeCase }}",
				{{- end }}
			{{- end }}
		).Values(
			{{- range $field := $fields }}
				{{- if not $field.IsIDField }}
					params.{{ $field.Name }},
				{{- end }}
			{{- end }}
		)
	)
	sql, args, err := insertBuilder.ToSql()
	logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
    "SQL": sql,
    "Args": args,
  }).Infof("Repository Insert build sql string of {{ $name }}")
	if err != nil {
    logger.WithFields(logger.Fields{
			"traceId": ctx.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Repository Insert insertBuilder error of {{ $name }}")
		return {{ $name }}, err
	}
	output := make(chan models.{{ $Name }}, 1)
	errors := hystrix.Go("{{ $name }}Insert", func() error {
		stmt, err := r.db.PrepareContext(ctx, sql)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Insert PrepareContext error of {{ $name }}")
			return err
		}
		row, err := stmt.ExecContext(ctx, args...)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Insert ExecContext error of {{ $name }}")
			return err
		}
		id, err := row.LastInsertId()
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Insert LastInsertId error of {{ $name }}")
			return err
		}
		new{{ $Name }}, err := r.GetByID(ctx, arguments.{{ $Name }}GetByID{ID: id})
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Insert GetByID error of {{ $name }}")
			return err
		}
		output <- new{{ $Name }}
		return nil
	}, nil)

	select {
	case err := <-errors:
		return {{ $name }}, err
	case out := <-output:
		return out, nil
	}
}

// setArgsToUpdateBuilder ...
func (r *RepositoryImpl) setArgsToUpdateBuilder(ctx context.Context, updateBuilder sq.UpdateBuilder, params arguments.{{ $Name }}Update) sq.UpdateBuilder {
  logger.WithFields(logger.Fields{
		"params": params,
	}).Infof("Repository setArgsToUpdateBuilder of {{ $name }}")
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			if
			{{- if $field.IsNullTimeField}}
				value, _ := params.{{- $field.Name }}.Value(); value != nil
			{{- else }}
			params.{{- $field.Name }} != nil
			{{- end }}{
				updateBuilder = updateBuilder.Set("{{ $field.Name | ToSnakeCase }}", *params.{{ $field.Name }})
			}
		{{- end }}
	{{- end }}
	return updateBuilder
}

// Update ...
func (r *RepositoryImpl) Update(ctx context.Context, params arguments.{{ $Name }}Update) (models.{{ $Name }}, error) {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository Update of {{ $name }}")
	var (
		{{ $name }}    models.{{ $Name }}
		updateBuilder = sq.Update("{{- $name_module }}").Where(sq.Eq{"id": *params.ID})
	)
	updateBuilderWithArgs := r.setArgsToUpdateBuilder(ctx, updateBuilder, params)

	sql, args, err := updateBuilderWithArgs.ToSql()
	logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
    "SQL": sql,
    "Args": args,
  }).Infof("Repository Update build sql string of {{ $name }}")
	if err != nil {
    logger.WithFields(logger.Fields{
			"traceId": ctx.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Repository Update updateBuilderWithArgs error of {{ $name }}")
		return {{ $name }}, err
	}
	output := make(chan models.{{ $Name }}, 1)
	errors := hystrix.Go("{{ $name }}Update", func() error {
		stmt, err := r.db.PrepareContext(ctx, sql)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Update PrepareContext error of {{ $name }}")
			return err
		}
			result, err := stmt.ExecContext(ctx, args...)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Update ExecContext error of {{ $name }}")
			return err
		}
		rowAffected, err := result.RowsAffected()
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Update RowsAffected error of {{ $name }}")
			return err
		}
		if rowAffected <= 0 {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": fmt.Errorf("error when update record id %d", *params.ID),
			}).Errorf("Repository Update rowAffected <= 0 of {{ $name }}")
			return fmt.Errorf("error when update record id %d", *params.ID)
		}
		new{{ $Name }}, err := r.GetByID(ctx, arguments.{{ $Name }}GetByID{ID: *params.ID})
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Update GetByID error of {{ $name }}")
			return err
		}
		output <- new{{ $Name }}
		return nil
	}, nil)

	select {
	case err := <-errors:
		return {{ $name }}, err
	case out := <-output:
		return out, nil
	}
}

// Delete ...
func (r *RepositoryImpl) Delete(ctx context.Context, params arguments.{{ $Name }}Delete) (int64, error) {
  logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Repository Delete of {{ $name }}")
	var (
		id            int64
		deleteBuilder = sq.Delete("{{ $name_module }}").Where(sq.Eq{"id": params.ID})
	)
	sql, args, err := deleteBuilder.ToSql()
	logger.WithFields(logger.Fields{
		"traceId": ctx.Value(utils.TraceIDKey),
    "SQL": sql,
    "Args": args,
  }).Infof("Repository Delete build sql string of {{ $name }}")
	if err != nil {
    logger.WithFields(logger.Fields{
			"traceId": ctx.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Repository Delete deleteBuilder error of {{ $name }}")
		return id, err
	}
	output := make(chan int64, 1)
	errors := hystrix.Go("{{ $name }}Delete", func() error {
		stmt, err := r.db.PrepareContext(ctx, sql)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Delete PrepareContext error of {{ $name }}")
			return err
		}
		result, err := stmt.ExecContext(ctx, args...)
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Delete ExecContext error of {{ $name }}")
			return err
		}
		rowAffected, err := result.RowsAffected()
		if err != nil {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": err,
			}).Errorf("Repository Delete RowsAffected error of {{ $name }}")
			return err
		}
		if rowAffected <= 0 {
			logger.WithFields(logger.Fields{
				"traceId": ctx.Value(utils.TraceIDKey),
				"Error": fmt.Errorf("not found record by id %d", params.ID),
			}).Errorf("Repository Update rowAffected <= 0 of {{ $name }}")
			return fmt.Errorf("not found record by id %d", params.ID)
		}
		output <- params.ID
		return nil
	}, nil)


	select {
		case err := <-errors:
			return id, err
		case out := <-output:
			return out, nil
	}
}

//go:generate mockery -name=IDatabase -output=mocks -case=underscore
