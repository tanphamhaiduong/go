{{- $Name := .Module.Name }}
{{- $name := .Module.Name | ToLowerCase }}
{{- $names := $name | ToPlural }}
{{- $fields := .Module.Fields  }}
// @generated
package {{ $name }}

import (
	"context"
	"errors"
	"log"

	sq "github.com/Masterminds/squirrel"
	"github.com/bxcodec/faker"
	"github.com/stretchr/testify/mock"
	"github.com/tanphamhaiduong/go/delta/internal/arguments"
	"github.com/tanphamhaiduong/go/delta/internal/models"
	"github.com/tanphamhaiduong/go/delta/internal/utils"
)

func (s *{{ $Name }}RepositoryTestSuite) TestGetByID_Success() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}GetByIDArgs{
			ID: 1,
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)
	s.MockI{{ $Name }}.On("GetByID", ctx, params).Return({{ $name }}, nil)
	actual, err := s.Repository.GetByID(ctx, params)
	s.Nil(err)
	s.Equal({{ $name }}, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByID_Fail() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}GetByIDArgs{
			ID: 1,
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(errors.New("some errors"))
	s.MockI{{ $Name }}.On("GetByID", ctx, params).Return({{ $name }}, errors.New("some errors"))
	actual, err := s.Repository.GetByID(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByIDs_Success() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}GetByIDsArgs{
			IDs: []int64{1, 2},
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(nil)
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	s.MockI{{ $Name }}.On("GetByIDs", ctx, params).Return({{ $names }}, nil)
	actual, err := s.Repository.GetByIDs(ctx, params)
	s.Nil(err)
	s.Equal({{ $names }}, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByIDs_Fail() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}GetByIDsArgs{
			IDs: []int64{1, 2},
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	s.MockI{{ $Name }}.On("GetByIDs", ctx, params).Return({{ $names }}, errors.New("some errors"))
	actual, err := s.Repository.GetByIDs(ctx, params)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestSetArgsToListSelectBuilder_Success() {
	var (
		params        = arguments.{{ $Name }}ListArgs{}
		selectBuilder = sq.Select("*").From("{{ $name }}")
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	offset := utils.CalculateOffsetForPage(params.Page, params.PageSize)
	expectedSelectBuilder := selectBuilder{{ range $field := $fields }}.Where(sq.{{ $field.QueryType }}{ "{{ $field.Name | ToSnakeCase }}": params.{{ $field.Name }} }){{ end }}.Limit(uint64(params.PageSize)).Offset(uint64(offset))
	expectSQL, expectArgs, expectErr := expectedSelectBuilder.ToSql()
	// Actual
	actual := s.Repository.setArgsToListSelectBuilder(selectBuilder, params)
	sql, args, err := actual.ToSql()
	s.Nil(err)
	s.Equal(expectSQL, sql)
	s.Equal(expectArgs, args)
	s.Equal(expectErr, err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestList_Success() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}ListArgs{
			Page:     1,
			PageSize: 10,
		}
		{{ $names }} []models.{{ $Name }}
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(nil)
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	s.MockI{{ $Name }}.On("List", ctx, params).Return({{ $names }}, nil)
	actual, err := s.Repository.List(ctx, params)
	s.Nil(err)
	s.Equal({{ $names }}, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestList_Fail() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}ListArgs{
			Page:     1,
			PageSize: 10,
		}
		{{ $names }} []models.{{ $Name }}
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	s.MockI{{ $Name }}.On("List", ctx, params).Return({{ $names }}, errors.New("some errors"))
	actual, err := s.Repository.List(ctx, params)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestSetArgsToCountSelectBuilder_Success() {
	var (
		params        = arguments.{{ $Name }}CountArgs{}
		selectBuilder = sq.Select("COUNT(id)").From("{{ $name }}")
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	expectedSelectBuilder := selectBuilder{{ range $field := $fields }}.Where(sq.{{ $field.QueryType }}{ "{{ $field.Name | ToSnakeCase }}": params.{{ $field.Name }} }){{ end }}
	expectSQL, expectArgs, expectErr := expectedSelectBuilder.ToSql()
	// Actual
	actual := s.Repository.setArgsToCountSelectBuilder(selectBuilder, params)
	sql, args, err := actual.ToSql()
	s.Nil(err)
	s.Equal(expectSQL, sql)
	s.Equal(expectArgs, args)
	s.Equal(expectErr, err)
}




func (s *{{ $Name }}RepositoryTestSuite) TestCount_Success() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}CountArgs{}
		count  int64
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx,
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan", mock.Anything).Return(nil)
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	s.MockI{{ $Name }}.On("List", ctx, params).Return(count, nil)
	actual, err := s.Repository.Count(ctx, params)
	s.Nil(err)
	s.Equal(count, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestCount_Fail() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}CountArgs{}
		count  int64
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan", mock.Anything).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	s.MockI{{ $Name }}.On("List", ctx, params).Return(count, errors.New("some errors"))
	actual, err := s.Repository.Count(ctx, params)
	s.Equal(count, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestInsert_Success() {
	var (
		ctx            = context.Background()
		sampleID int64 = 1
		params         = arguments.{{ $Name }}InsertArgs{}
		expected models.{{ $Name }}
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	{{ $name }} := models.{{ $Name }}{
		ID: sampleID,
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				{{ $field.Name }}: params.{{ $field.Name }},
			{{- end }}
		{{- end }}
	}
	//Mock Insert
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
	).Return(s.MockIResult, nil)
	s.MockIResult.On("LastInsertId").Return(sampleID, nil)
	s.MockI{{ $Name }}.On("Insert", ctx, params).Return({{ $name }}, nil)
	// Mock GetByID
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)
	s.MockI{{ $Name }}.On("GetByID", ctx, params).Return({{ $name }}, nil)

	actual, err := s.Repository.Insert(ctx, params)
	s.Nil(err)
	s.Equal(expected, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestInsert_Fail() {
	var (
		ctx            = context.Background()
		sampleID int64 = 1
		params         = arguments.{{ $Name }}InsertArgs{
    {{- range $field := $fields }}
      {{- if not $field.IsIDField }}
        {{ $field.Name }}: {{ if $field.IsInt64 }}0{{ else }}"mockString"{{ end }},
      {{- end }}
    {{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			params.{{ $field.Name }},
		{{- end }}
	{{- end }}
	).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("LastInsertId").Return(sampleID, errors.New("some errors"))
	s.MockI{{ $Name }}.On("Insert", ctx, params).Return({{ $name }}, errors.New("some errors"))
	actual, err := s.Repository.Insert(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestSetArgsToUpdateBuilder_Success() {
	var (
		params = arguments.{{ $Name }}UpdateArgs{}
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	updateBuilder := sq.Update("{{ $name }}").Where(sq.Eq{"id": *params.ID})
	expectedSelectBuilder := updateBuilder{{ range $field := $fields }}{{ if not $field.IsIDField }}.Set("{{ $field.Name | ToSnakeCase }}", *params.{{ $field.Name }} ){{ end }}{{ end }}
	actual := s.Repository.setArgsToUpdateBuilder(updateBuilder, params)
	s.Equal(expectedSelectBuilder, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Success() {
	var (
		ctx      = context.Background()
		params   = arguments.{{ $Name }}UpdateArgs{}
		expected models.{{ $Name }}
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	{{ $name }} := models.{{ $Name }}{
		{{- range $field := $fields }}
			{{ $field.Name }}: *params.{{ $field.Name }},
		{{- end }}
	}
	// Mock Update
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				*params.{{ $field.Name }},
			{{- end }}
		{{- end }}
		*params.ID,
	).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(*params.ID, nil)
	s.MockI{{ $Name }}.On("Update", ctx, params).Return({{ $name }}, nil)
	// Mock GetByID
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)
	s.MockI{{ $Name }}.On("GetByID", ctx, params).Return({{ $name }}, nil)

	actual, err := s.Repository.Update(ctx, params)
	s.Nil(err)
	s.Equal(expected, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Fail() {
	var (
		ctx              = context.Background()
		sampleID   int64 = 1
		mockString       = "mockString"
		params           = arguments.{{ $Name }}UpdateArgs{
			{{- range $field := $fields }}
				{{ $field.Name }}: {{ if $field.IsInt64 }}&sampleID{{ else }}&mockString{{ end }},
			{{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("ExecContext", ctx, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("RowsAffected").Return(sampleID, errors.New("some errors"))
	s.MockI{{ $Name }}.On("Update", ctx, params).Return({{ $name }}, errors.New("some errors"))
	actual, err := s.Repository.Update(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestDelete_Success() {
	var (
		ctx               = context.Background()
		params            = arguments.{{ $Name }}DeleteArgs{}
		rowEffected int64 = 1
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx, params.ID).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(params.ID, nil)
	s.MockI{{ $Name }}.On("Delete", ctx, params).Return(rowEffected, nil)
	actual, err := s.Repository.Delete(ctx, params)
	s.Nil(err)
	s.Equal(params.ID, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestDelete_Fail() {
	var (
		ctx         = context.Background()
		params      = arguments.{{ $Name }}DeleteArgs{}
		rowEffected int64
	)
	err := faker.FakeData(&params)
	if err != nil {
		log.Fatal(err)
	}
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("ExecContext", ctx, params.ID).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("RowsAffected").Return(params.ID, errors.New("some errors"))
	s.MockI{{ $Name }}.On("Delete", ctx, params).Return(rowEffected, errors.New("some errors"))
	actual, err := s.Repository.Delete(ctx, params)
	s.Equal(rowEffected, actual)
	s.NotNil(err)
}
