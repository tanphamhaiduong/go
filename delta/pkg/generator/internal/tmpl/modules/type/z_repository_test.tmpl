{{- $Name := .Module.Name }}
{{- $name := .Module.Name | ToLowerCase }}
{{- $names := $name | ToPlural }}
{{- $fields := .Module.Fields  }}
// @generated
package {{ $name }}

import (
	"context"
	"errors"

	sq "github.com/Masterminds/squirrel"
	"github.com/stretchr/testify/mock"
	"github.com/tanphamhaiduong/go/delta/internal/arguments"
	"github.com/tanphamhaiduong/go/delta/internal/models"
	"github.com/tanphamhaiduong/go/delta/internal/utils"
)

func (s *{{ $Name }}RepositoryTestSuite) TestGetByID_Success() {
	var (
		ctx    = context.Background()
		param = arguments.{{ $Name }}GetByID{
			ID: 1,
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, param.ID).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)
	actual, err := s.Repository.GetByID(ctx, param)
	s.Nil(err)
	s.Equal({{ $name }}, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByID_Fail() {
	var (
		ctx    = context.Background()
		param = arguments.{{ $Name }}GetByID{
			ID: 1,
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryRowContext", ctx, param.ID).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	actual, err := s.Repository.GetByID(ctx, param)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByID_Fail1() {
	var (
		ctx    = context.Background()
		param = arguments.{{ $Name }}GetByID{
			ID: 1,
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, param.ID).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	actual, err := s.Repository.GetByID(ctx, param)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByIDs_Success() {
	var (
		ctx    = context.Background()
		param = arguments.{{ $Name }}GetByIDs{
			IDs: []int64{1, 2},
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	actual, err := s.Repository.GetByIDs(ctx, param)
	s.Nil(err)
	s.Equal({{ $names }}, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByIDs_Fail() {
	var (
		ctx    = context.Background()
		param = arguments.{{ $Name }}GetByIDs{
			IDs: []int64{1, 2},
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	actual, err := s.Repository.GetByIDs(ctx, param)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByIDs_Fail1() {
	var (
		ctx    = context.Background()
		param = arguments.{{ $Name }}GetByIDs{
			IDs: []int64{1, 2},
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	actual, err := s.Repository.GetByIDs(ctx, param)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestGetByIDs_Fail2() {
	var (
		ctx    = context.Background()
		param = arguments.{{ $Name }}GetByIDs{
			IDs: []int64{1, 2},
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx, mock.Anything, mock.Anything).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(true)
	actual, err := s.Repository.GetByIDs(ctx, param)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestSetArgsToListSelectBuilder_Success() {
	var (
		ctx = context.Background()
		params = arguments.{{ $Name }}List{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
			LastID: 1,
			PageSize: 10,
		}
		selectBuilder = sq.Select("*").From("{{ $name }}")
	)
	expectedSelectBuilder := selectBuilder{{ range $field := $fields }}.Where(sq.{{ $field.QueryType }}{ "{{ $field.Name | ToSnakeCase }}": params.{{ $field.Name }} }){{ end }}.Limit(uint64(params.PageSize)).Where(sq.Gt{"id": params.LastID})
	expectSQL, expectArgs, expectErr := expectedSelectBuilder.ToSql()
	// Actual
	actual := s.Repository.setArgsToListSelectBuilder(ctx, selectBuilder, params)
	sql, args, err := actual.ToSql()
	s.Nil(err)
	s.Equal(expectSQL, sql)
	s.Equal(expectArgs, args)
	s.Equal(expectErr, err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestList_Success() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}List{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
			PageSize: 10,
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx,
		{{- range $field := $fields }}
				{{- if $field.IsNullTimeField }}
					params.{{ $field.Name }}.Time,
				{{- else }}
					params.{{ $field.Name }},
				{{- end }}
		{{- end }}
		mock.Anything,
		mock.Anything,
	).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	actual, err := s.Repository.List(ctx, params)
	s.Nil(err)
	s.Equal({{ $names }}, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestList_Fail() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}List{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
			PageSize: 10,
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryContext", ctx,
		{{- range $field := $fields }}
			{{- if $field.IsNullTimeField }}
				params.{{ $field.Name }}.Time,
			{{- else }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
		mock.Anything,
		mock.Anything,
	).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	actual, err := s.Repository.List(ctx, params)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestList_Fail1() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}List{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
			PageSize: 10,
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx,
		{{- range $field := $fields }}
			{{- if $field.IsNullTimeField }}
				params.{{ $field.Name }}.Time,
			{{- else }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
		mock.Anything,
		mock.Anything,
	).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(false)
	actual, err := s.Repository.List(ctx, params)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestList_Fail2() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}List{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
		}
		{{ $names }} []models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryContext", ctx,
		{{- range $field := $fields }}
			{{- if $field.IsNullTimeField }}
				params.{{ $field.Name }}.Time,
			{{- else }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
		mock.Anything,
		mock.Anything,
	).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))
	s.MockIRows.On("Close").Return(nil)
	s.MockIRows.On("Next").Return(true)
	actual, err := s.Repository.List(ctx, params)
	s.Equal({{ $names }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestSetArgsToCountSelectBuilder_Success() {
	var (
		ctx = context.Background()
		params = arguments.{{ $Name }}Count{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
		}
		selectBuilder = sq.Select("COUNT(id)").From("{{ $name }}")
	)
	expectedSelectBuilder := selectBuilder{{ range $field := $fields }}.Where(sq.{{ $field.QueryType }}{ "{{ $field.Name | ToSnakeCase }}": params.{{ $field.Name }} }){{ end }}
	expectSQL, expectArgs, expectErr := expectedSelectBuilder.ToSql()
	// Actual
	actual := s.Repository.setArgsToCountSelectBuilder(ctx, selectBuilder, params)
	sql, args, err := actual.ToSql()
	s.Nil(err)
	s.Equal(expectSQL, sql)
	s.Equal(expectArgs, args)
	s.Equal(expectErr, err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestCount_Success() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}Count{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
		}
		count  int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx,
		{{- range $field := $fields }}
		{{- if $field.IsNullTimeField }}
			params.{{ $field.Name }}.Time,
		{{- else }}
			params.{{ $field.Name }},
		{{- end }}
	{{- end }}
	).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan", mock.Anything).Return(nil)
	actual, err := s.Repository.Count(ctx, params)
	s.Nil(err)
	s.Equal(count, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestCount_Fail() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}Count{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
		}
		count  int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("QueryRowContext", ctx,
		{{- range $field := $fields }}
			{{- if $field.IsNullTimeField }}
				params.{{ $field.Name }}.Time,
			{{- else }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
	).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan", mock.Anything).Return(errors.New("some errors"))
	actual, err := s.Repository.Count(ctx, params)
	s.Equal(count, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestCount_Fail1() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}Count{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
		}
		count  int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx,
		{{- range $field := $fields }}
			{{- if $field.IsNullTimeField }}
				params.{{ $field.Name }}.Time,
			{{- else }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
	).Return(s.MockIRows, errors.New("some errors"))
	s.MockIRows.On("Scan", mock.Anything).Return(errors.New("some errors"))
	actual, err := s.Repository.Count(ctx, params)
	s.Equal(count, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestCount_Fail2() {
	var (
		ctx    = context.Background()
		params = arguments.{{ $Name }}Count{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
			{{- end }}
		}
		count  int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx,
		{{- range $field := $fields }}
			{{- if $field.IsNullTimeField }}
				params.{{ $field.Name }}.Time,
			{{- else }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
	).Return(s.MockIRows, nil)
	s.MockIRows.On("Scan", mock.Anything).Return(errors.New("some errors"))
	actual, err := s.Repository.Count(ctx, params)
	s.Equal(count, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestInsert_Success() {
	var (
		ctx            = context.Background()
		sampleID int64 = 1
		params         = arguments.{{ $Name }}Insert{
			{{- range $field := $fields }}
				{{- if not $field.IsIDField }}
					{{ $field.Name }}:
					{{- if $field.IsInt64 }}1
					{{- else if $field.IsNullTimeField }} mysql.NullTime{
						Time:  time.Time{},
						Valid: true,
					}
					{{- else if $field.IsStatusField }} "active"
					{{- else }}"mockString"
					{{- end }},
				{{- end }}
    	{{- end }}
		}
		expected models.{{ $Name }}
	)
	//Mock Insert
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
	).Return(s.MockIResult, nil)
	s.MockIResult.On("LastInsertId").Return(sampleID, nil)
	// Mock GetByID
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)

	actual, err := s.Repository.Insert(ctx, params)
	s.Nil(err)
	s.Equal(expected, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestInsert_Fail() {
	var (
		ctx            = context.Background()
		sampleID int64 = 1
		params         = arguments.{{ $Name }}Insert{
    {{- range $field := $fields }}
      {{- if not $field.IsIDField }}
        {{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
      {{- end }}
    {{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			params.{{ $field.Name }},
		{{- end }}
	{{- end }}
	).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("LastInsertId").Return(sampleID, errors.New("some errors"))
	actual, err := s.Repository.Insert(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestInsert_Fail1() {
	var (
		ctx            = context.Background()
		sampleID int64 = 1
		params         = arguments.{{ $Name }}Insert{
    {{- range $field := $fields }}
      {{- if not $field.IsIDField }}
        {{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
      {{- end }}
    {{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			params.{{ $field.Name }},
		{{- end }}
	{{- end }}
	).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("LastInsertId").Return(sampleID, errors.New("some errors"))
	actual, err := s.Repository.Insert(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestInsert_Fail2() {
	var (
		ctx            = context.Background()
		sampleID int64 = 1
		params         = arguments.{{ $Name }}Insert{
    {{- range $field := $fields }}
      {{- if not $field.IsIDField }}
        {{ $field.Name }}:
				{{- if $field.IsInt64 }}1
				{{- else if $field.IsNullTimeField }} mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} "active"
				{{- else }}"mockString"
				{{- end }},
      {{- end }}
    {{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			params.{{ $field.Name }},
		{{- end }}
	{{- end }}
	).Return(s.MockIResult, nil)
	s.MockIResult.On("LastInsertId").Return(sampleID, errors.New("some errors"))
	actual, err := s.Repository.Insert(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestInsert_Fail3() {
	var (
		ctx            = context.Background()
		sampleID int64 = 1
		params         = arguments.{{ $Name }}Insert{
			{{- range $field := $fields }}
				{{- if not $field.IsIDField }}
					{{ $field.Name }}:
					{{- if $field.IsInt64 }}1
					{{- else if $field.IsNullTimeField }} mysql.NullTime{
						Time:  time.Time{},
						Valid: true,
					}
					{{- else if $field.IsStatusField }} "active"
					{{- else }}"mockString"
					{{- end }},
				{{- end }}
    	{{- end }}
		}
		expected models.{{ $Name }}
	)
	//Mock Insert
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				params.{{ $field.Name }},
			{{- end }}
		{{- end }}
	).Return(s.MockIResult, nil)
	s.MockIResult.On("LastInsertId").Return(sampleID, nil)
	// Mock GetByID
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))

	actual, err := s.Repository.Insert(ctx, params)
	s.Equal(expected, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestSetArgsToUpdateBuilder_Success() {
	var (
		ctx = context.Background()
		sampleID int64 = 1
		mockString = "mockString"
		{{- range $field := $fields }}
			{{- if $field.IsStatusField }}
				status = "active"
			{{- end }}
		{{- end }}
		params = arguments.{{ $Name }}Update{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }} &sampleID
				{{- else if $field.IsNullTimeField }} &mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} &status
				{{- else }} &mockString
				{{- end }},
    	{{- end }}
		}
	)
	updateBuilder := sq.Update("{{ $name }}").Where(sq.Eq{"id": *params.ID})
	expectedSelectBuilder := updateBuilder{{ range $field := $fields }}{{ if not $field.IsIDField }}.Set("{{ $field.Name | ToSnakeCase }}", *params.{{ $field.Name }} ){{ end }}{{ end }}
	actual := s.Repository.setArgsToUpdateBuilder(ctx, updateBuilder, params)
	s.Equal(expectedSelectBuilder, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Success() {
	var (
		ctx      = context.Background()
		sampleID int64 = 1
		rowEffected int64 = 1
		mockString = "mockString"
		{{- range $field := $fields }}
			{{- if $field.IsStatusField }}
				status = "active"
			{{- end }}
		{{- end }}
		params   = arguments.{{ $Name }}Update{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }} &sampleID
				{{- else if $field.IsNullTimeField }} &mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} &status
				{{- else }} &mockString
				{{- end }},
    	{{- end }}
		}
		expected models.{{ $Name }}
	)
	// Mock Update
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				*params.{{ $field.Name }},
			{{- end }}
		{{- end }}
		*params.ID,
	).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(rowEffected, nil)
	// Mock GetByID
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(nil)

	actual, err := s.Repository.Update(ctx, params)
	s.Nil(err)
	s.Equal(expected, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Fail() {
	var (
		ctx              = context.Background()
		sampleID int64 = 1
		rowEffected int64
		mockString = "mockString"
		{{- range $field := $fields }}
			{{- if $field.IsStatusField }}
				status = "active"
			{{- end }}
		{{- end }}
		params           = arguments.{{ $Name }}Update{
			{{- range $field := $fields }}
				{{ $field.Name }}:
					{{- if $field.IsInt64 }}&sampleID
					{{- else if $field.IsNullTimeField }} &mysql.NullTime{
						Time:  time.Time{},
						Valid: true,
					}
					{{- else if $field.IsStatusField }} &status
					{{- else }}&mockString
					{{- end }},
			{{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			*params.{{ $field.Name }},
		{{- end }}
	{{- end }}
		*params.ID,
	).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("RowsAffected").Return(rowEffected, errors.New("some errors"))
	actual, err := s.Repository.Update(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Fail1() {
	var (
		ctx              = context.Background()
		sampleID int64 = 1
		rowEffected int64
		mockString = "mockString"
		{{- range $field := $fields }}
			{{- if $field.IsStatusField }}
				status = "active"
			{{- end }}
		{{- end }}
		params = arguments.{{ $Name }}Update{
			{{- range $field := $fields }}
				{{ $field.Name }}:
					{{- if $field.IsInt64 }}&sampleID
					{{- else if $field.IsNullTimeField }} &mysql.NullTime{
						Time:  time.Time{},
						Valid: true,
					}
					{{- else if $field.IsStatusField }} &status
					{{- else }}&mockString
					{{- end }},
			{{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			*params.{{ $field.Name }},
		{{- end }}
	{{- end }}
		*params.ID,
	).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("RowsAffected").Return(rowEffected, errors.New("some errors"))
	actual, err := s.Repository.Update(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Fail2() {
	var (
		ctx              = context.Background()
		sampleID int64 = 1
		rowEffected int64
		mockString = "mockString"
		{{- range $field := $fields }}
			{{- if $field.IsStatusField }}
				status = "active"
			{{- end }}
		{{- end }}
		params = arguments.{{ $Name }}Update{
			{{- range $field := $fields }}
				{{ $field.Name }}:
					{{- if $field.IsInt64 }}&sampleID
					{{- else if $field.IsNullTimeField }} &mysql.NullTime{
						Time:  time.Time{},
						Valid: true,
					}
					{{- else if $field.IsStatusField }} &status
					{{- else }}&mockString
					{{- end }},
			{{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			*params.{{ $field.Name }},
		{{- end }}
	{{- end }}
		*params.ID,
	).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(rowEffected, errors.New("some errors"))
	actual, err := s.Repository.Update(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Fail3() {
	var (
		ctx              = context.Background()
		sampleID int64 = 1
		rowEffected int64
		mockString = "mockString"
		{{- range $field := $fields }}
			{{- if $field.IsStatusField }}
				status = "active"
			{{- end }}
		{{- end }}
		params = arguments.{{ $Name }}Update{
			{{- range $field := $fields }}
				{{ $field.Name }}:
					{{- if $field.IsInt64 }}&sampleID
					{{- else if $field.IsNullTimeField }} &mysql.NullTime{
						Time:  time.Time{},
						Valid: true,
					}
					{{- else if $field.IsStatusField }} &status
					{{- else }}&mockString
					{{- end }},
			{{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			*params.{{ $field.Name }},
		{{- end }}
	{{- end }}
		*params.ID,
	).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(rowEffected, nil)
	actual, err := s.Repository.Update(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestUpdate_Fail4() {
	var (
		ctx      = context.Background()
		sampleID int64 = 1
		mockString = "mockString"
		{{- range $field := $fields }}
			{{- if $field.IsStatusField }}
				status = "active"
			{{- end }}
		{{- end }}
		params   = arguments.{{ $Name }}Update{
			{{- range $field := $fields }}
				{{ $field.Name }}:
				{{- if $field.IsInt64 }} &sampleID
				{{- else if $field.IsNullTimeField }} &mysql.NullTime{
					Time:  time.Time{},
					Valid: true,
				}
				{{- else if $field.IsStatusField }} &status
				{{- else }} &mockString
				{{- end }},
    	{{- end }}
		}
		{{ $name }} models.{{ $Name }}
	)
	// Mock Update
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx,
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				*params.{{ $field.Name }},
			{{- end }}
		{{- end }}
		*params.ID,
	).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(*params.ID, nil)
	// Mock GetByID
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("QueryRowContext", ctx, mock.Anything).Return(s.MockIRow)
	s.MockIRow.On("Scan",
		{{- range $field := $fields }}
			mock.Anything,
		{{- end }}
	).Return(errors.New("some errors"))

	actual, err := s.Repository.Update(ctx, params)
	s.Equal({{ $name }}, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestDelete_Success() {
	var (
		ctx               = context.Background()
		param            = arguments.{{ $Name }}Delete{
			ID: 1,
		}
		rowEffected int64 = 1
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx, param.ID).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(rowEffected, nil)
	actual, err := s.Repository.Delete(ctx, param)
	s.Nil(err)
	s.Equal(param.ID, actual)
}

func (s *{{ $Name }}RepositoryTestSuite) TestDelete_Fail() {
	var (
		ctx         = context.Background()
		param      = arguments.{{ $Name }}Delete{
			ID: 1,
		}
		rowEffected int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, errors.New("some errors"))
	s.MockIStmt.On("ExecContext", ctx, param.ID).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("RowsAffected").Return(rowEffected, errors.New("some errors"))
	actual, err := s.Repository.Delete(ctx, param)
	s.Equal(rowEffected, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestDelete_Fail1() {
	var (
		ctx         = context.Background()
		param      = arguments.{{ $Name }}Delete{
			ID: 1,
		}
		rowEffected int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx, param.ID).Return(s.MockIResult, errors.New("some errors"))
	s.MockIResult.On("RowsAffected").Return(rowEffected, errors.New("some errors"))
	actual, err := s.Repository.Delete(ctx, param)
	s.Equal(rowEffected, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestDelete_Fail2() {
	var (
		ctx         = context.Background()
		param      = arguments.{{ $Name }}Delete{
			ID: 1,
		}
		rowEffected int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx, param.ID).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(rowEffected, errors.New("some errors"))
	actual, err := s.Repository.Delete(ctx, param)
	s.Equal(rowEffected, actual)
	s.NotNil(err)
}

func (s *{{ $Name }}RepositoryTestSuite) TestDelete_Fail3() {
	var (
		ctx         = context.Background()
		param      = arguments.{{ $Name }}Delete{
			ID: 1,
		}
		rowEffected int64
	)
	s.MockIDB.On("PrepareContext", ctx, mock.Anything).Return(s.MockIStmt, nil)
	s.MockIStmt.On("ExecContext", ctx, param.ID).Return(s.MockIResult, nil)
	s.MockIResult.On("RowsAffected").Return(rowEffected, nil)
	actual, err := s.Repository.Delete(ctx, param)
	s.Equal(rowEffected, actual)
	s.NotNil(err)
}
