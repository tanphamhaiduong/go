// @generated
{{- $Module := .Module }}
{{- $Name := .Module.Name }}
{{- $fields := .Module.Fields  }}
{{- $name := .Module.Name | ToLowerCase }}
package {{ $name }}

import (
	"database/sql"

	"github.com/graphql-go/graphql"
	"github.com/tanphamhaiduong/go/delta/internal/arguments"
	"github.com/tanphamhaiduong/go/delta/internal/customgraphql"
	"github.com/tanphamhaiduong/go/delta/internal/models"
	"github.com/tanphamhaiduong/go/delta/internal/utils"
	"github.com/tanphamhaiduong/go/common/logger"
)

var (
	// Type ...
	Type = graphql.NewObject(graphql.ObjectConfig{
		Name:        "{{ $Name }}",
		Description: "This is type Feature",
    Fields: graphql.Fields{
      {{- range $field := $fields }}
        "{{ $field.Name | ToLowerCamelCase }}": &graphql.Field{
          {{- if $field.GraphQLRequired }}
            Type:        graphql.NewNonNull({{ $field.GraphQLType }}),
          {{- else }}
            Type:        {{ $field.GraphQLType }},
          {{- end }}
          Description: "{{ $field.GraphQLDescription }}",
        },
      {{- end }}
    },
	})

{{- if $Module.IsHaveGetByID }}
	// GetByIDTypeArgs ...
	GetByIDTypeArgs = graphql.FieldConfigArgument{
		"id": &graphql.ArgumentConfig{
			Type: graphql.NewNonNull(graphql.Int),
		},
	}
{{- end }}

{{- if $Module.IsHaveList }}
	// ListTypeArgs ...
	ListTypeArgs = graphql.FieldConfigArgument{
		{{- range $field := $fields }}
			"{{ $field.Name | ToLowerCamelCase }}": &graphql.ArgumentConfig{
				Type:        {{ $field.GraphQLType }},
				Description: "{{ $field.GraphQLDescription }}",
			},
		{{- end }}
		"page": &graphql.ArgumentConfig{
			Type:        graphql.Int,
			Description: "This is feature page",
			DefaultValue: 1,
		},
		"pageSize": &graphql.ArgumentConfig{
			Type:         graphql.Int,
			Description:  "This is feature pageSize",
			DefaultValue: 10,
		},
	}
{{- end }}

{{- if $Module.IsHaveInsert }}
	// InsertTypeArgs ...
	InsertTypeArgs = graphql.FieldConfigArgument{
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				"{{ $field.Name | ToLowerCamelCase }}": &graphql.ArgumentConfig{
					{{- if $field.GraphQLRequired }}
            Type:        graphql.NewNonNull({{ $field.GraphQLType }}),
          {{- else }}
            Type:        {{ $field.GraphQLType }},
          {{- end }}
					Description: "{{ $field.GraphQLDescription }}",
				},
			{{- end  }}
		{{- end }}
	}
{{- end }}

{{- if $Module.IsHaveUpdate }}
	// UpdateTypeArgs ...
	UpdateTypeArgs = graphql.FieldConfigArgument{
		"id": &graphql.ArgumentConfig{
			Type: graphql.NewNonNull(graphql.Int),
		},
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				"{{ $field.Name | ToLowerCamelCase }}": &graphql.ArgumentConfig{
					Type:        {{ $field.GraphQLType }},
					Description: "{{ $field.GraphQLDescription }}",
				},
			{{- end  }}
		{{- end }}
	}
{{- end }}

{{- if $Module.IsHaveDelete }}
	// DeleteTypeArgs ...
	DeleteTypeArgs = graphql.FieldConfigArgument{
		"id": &graphql.ArgumentConfig{
			Type: graphql.NewNonNull(graphql.Int),
		},
	}
{{- end }}
)

// ICoreHandler ...
type ICoreHandler interface {
	GetByID(ctx context.Context, param arguments.{{ $Name }}GetByID) (models.{{ $Name }}, error)
	GetByIDs(ctx context.Context, param arguments.{{ $Name }}GetByIDs) ([]models.{{ $Name }}, error)
	Count(ctx context.Context, params arguments.{{ $Name }}Count) (int64, error)
	List(ctx context.Context, params arguments.{{ $Name }}List) ([]models.{{ $Name }}, error)
	Insert(ctx context.Context, params arguments.{{ $Name }}Insert) (models.{{ $Name }}, error)
	Update(ctx context.Context, params arguments.{{ $Name }}Update) (models.{{ $Name }}, error)
	Delete(ctx context.Context, param arguments.{{ $Name }}Delete) (int64, error)
}

func (r *ResolverImpl) checkPermission(claims models.Claims, method string) bool {
	var isPermit bool
	for _, permission := range claims.Permissions {
		isPermit = permission.Name == method
		if isPermit {
			break
		}
	}
	return isPermit
}

{{- if $Module.IsHaveGetByID }}
// GetByID ...
func (r *ResolverImpl) GetByID(param graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"traceId": param.Context.Value(utils.TraceIDKey),
		"param": param,
	}).Infof("Resolver GetByID of {{ $name }}")
	claims := utils.ExtractClaimsFromContext(param.Context)
	isPermit := r.checkPermission(claims, fmt.Sprintf("{{ $Name }}%s", utils.GetByID))
	if !isPermit {
		logger.WithFields(logger.Fields{
			"traceId": param.Context.Value(utils.TraceIDKey),
			"Error":   goerrors.ErrNotAuthorized(param.Context.Value(utils.TraceIDKey)),
		}).Errorf("Resolver GetByID !isPermit of {{ $name }}")
		return nil, goerrors.ErrNotAuthorized(param.Context.Value(utils.TraceIDKey))
	}
	// parse param
	args := arguments.{{ $Name }}GetByID{}
	if err := utils.Parse(param.Args, &args); err != nil {
		logger.WithFields(logger.Fields{
			"traceId": param.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver GetByID utils.Parse of {{ $name }}")
		return nil, goerrors.ErrInternalServerError(param.Context.Value(utils.TraceIDKey))
	}
	response, err := r.{{ $name }}.GetByID(param.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": param.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver GetByID r.{{ $name }}.GetByID of {{ $name }}")
		if err == sql.ErrNoRows {
			return nil, goerrors.ErrNotFound(param.Context.Value(utils.TraceIDKey))
		}
		return nil, goerrors.ErrInternalServerError(param.Context.Value(utils.TraceIDKey))
	}
	return response, nil
}
{{- end }}

{{- if $Module.IsHaveCount }}
// Count ...
func (r *ResolverImpl) Count(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"traceId": params.Context.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Resolver Count of {{ $name }}")
	claims := utils.ExtractClaimsFromContext(params.Context)
	isPermit := r.checkPermission(claims, fmt.Sprintf("{{ $Name }}%s", utils.Count))
	if !isPermit {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error":   goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey)),
		}).Errorf("Resolver Count !isPermit of {{ $name }}")
		return nil, goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey))
	}
	// parse params
	args := arguments.{{ $Name }}Count{}
	err := utils.Parse(params.Source.(map[string]interface{}), &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Count utils.Parse of {{ $name }}")
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	response, err := r.{{ $name }}.Count(params.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Count r.{{ $name }}.Count of {{ $name }}")
		if err == sql.ErrNoRows {
			return nil, goerrors.ErrNotFound(params.Context.Value(utils.TraceIDKey))
		}
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	return response, nil
}
{{- end }}

{{- if $Module.IsHaveList }}
// List ...
func (r *ResolverImpl) List(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"traceId": params.Context.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Resolver List of {{ $name }}")
	claims := utils.ExtractClaimsFromContext(params.Context)
	isPermit := r.checkPermission(claims, fmt.Sprintf("{{ $Name }}%s", utils.List))
	if !isPermit {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error":   goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey)),
		}).Errorf("Resolver List  of {{ $name }}")
		return nil, goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey))
	}
	// parse params
	args := arguments.{{ $Name }}List{}
	err := utils.Parse(params.Source.(map[string]interface{}), &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver List utils.Parse of {{ $name }}")
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	response, err := r.{{ $name }}.List(params.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver List r.{{ $name }}.List of {{ $name }}")
		if err == sql.ErrNoRows {
			return nil, goerrors.ErrNotFound(params.Context.Value(utils.TraceIDKey))
		}
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	return response, nil
}
{{- end }}

{{- if $Module.IsHaveInsert }}
// Insert ...
func (r *ResolverImpl) Insert(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"traceId": params.Context.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Resolver Insert of {{ $name }}")
	claims := utils.ExtractClaimsFromContext(params.Context)
	isPermit := r.checkPermission(claims, fmt.Sprintf("{{ $Name }}%s", utils.Insert))
	if !isPermit {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error":   goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey)),
		}).Errorf("Resolver Insert !isPermit of {{ $name }}")
		return nil, goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey))
	}
	// parse params
	args := arguments.{{ $Name }}Insert{}
	err := utils.Parse(params.Args, &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Insert utils.Parse of {{ $name }}")
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	response, err := r.{{ $name }}.Insert(params.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Insert r.{{ $name }}.Insert of {{ $name }}")
		if err == sql.ErrNoRows {
			return nil, goerrors.ErrNotFound(params.Context.Value(utils.TraceIDKey))
		}
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	return response, nil
}
{{- end }}

{{- if $Module.IsHaveUpdate }}
// Update ...
func (r *ResolverImpl) Update(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"traceId": params.Context.Value(utils.TraceIDKey),
		"params": params,
	}).Infof("Resolver Update of {{ $name }}")
	claims := utils.ExtractClaimsFromContext(params.Context)
	isPermit := r.checkPermission(claims, fmt.Sprintf("{{ $Name }}%s", utils.Update))
	if !isPermit {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error":   goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey)),
		}).Errorf("Resolver Update !isPermit of {{ $name }}")
		return nil, goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey))
	}
	// parse params
	args := arguments.{{ $Name }}Update{}
	err := utils.Parse(params.Args, &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Update utils.Parse of {{ $name }}")
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	response, err := r.{{ $name }}.Update(params.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": params.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Update r.{{ $name }}.Update of {{ $name }}")
		if err == sql.ErrNoRows {
			return nil, goerrors.ErrNotFound(params.Context.Value(utils.TraceIDKey))
		}
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	return response, nil
}
{{- end }}

{{- if $Module.IsHaveDelete }}
// Delete ...
func (r *ResolverImpl) Delete(param graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"traceId": param.Context.Value(utils.TraceIDKey),
		"param": param,
	}).Infof("Resolver Delete of {{ $name }}")
	claims := utils.ExtractClaimsFromContext(param.Context)
	isPermit := r.checkPermission(claims, fmt.Sprintf("{{ $Name }}%s", utils.Delete))
	if !isPermit {
		logger.WithFields(logger.Fields{
			"traceId": param.Context.Value(utils.TraceIDKey),
			"Error":   goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey)),
		}).Errorf("Resolver Delete !isPermit of {{ $name }}")
		return nil, goerrors.ErrNotAuthorized(params.Context.Value(utils.TraceIDKey))
	}
	// parse param
	args := arguments.{{ $Name }}Delete{}
	err := utils.Parse(param.Args, &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": param.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Delete utils.Parse of {{ $name }}")
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	response, err := r.{{ $name }}.Delete(param.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"traceId": param.Context.Value(utils.TraceIDKey),
			"Error": err,
		}).Errorf("Resolver Delete r.{{ $name }}.Delete of {{ $name }}")
		if err == sql.ErrNoRows {
			return nil, goerrors.ErrNotFound(params.Context.Value(utils.TraceIDKey))
		}
		return nil, goerrors.ErrInternalServerError(params.Context.Value(utils.TraceIDKey))
	}
	return response, nil
}
{{- end }}

//go:generate mockery -name=IHandler -output=mocks -case=underscore