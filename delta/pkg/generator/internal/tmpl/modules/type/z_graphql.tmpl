// @generated
{{- $Name := .Module.Name }}
{{- $fields := .Module.Fields  }}
{{- $name := .Module.Name | ToLowerCase }}
package {{ $name }}

import (
	"database/sql"

	"github.com/graphql-go/graphql"
	"github.com/tanphamhaiduong/go/delta/internal/arguments"
	"github.com/tanphamhaiduong/go/delta/internal/customgraphql"
	"github.com/tanphamhaiduong/go/delta/internal/models"
	"github.com/tanphamhaiduong/go/delta/internal/utils"
	"github.com/tanphamhaiduong/go/common/logger"
)

var (
	// Type ...
	Type = graphql.NewObject(graphql.ObjectConfig{
		Name:        "{{ $Name }}",
		Description: "This is type Feature",
    Fields: graphql.Fields{
      {{- range $field := $fields }}
        "{{ $field.Name | ToLowerCamelCase }}": &graphql.Field{
          {{- if $field.GraphQLRequired }}
            Type:        graphql.NewNonNull({{ $field.GraphQLType }}),
          {{- else }}
            Type:        {{ $field.GraphQLType }},
          {{- end }}
          Description: "{{ $field.GraphQLDescription }}",
        },
      {{- end }}
    },
	})

	// GetByIDTypeArgs ...
	GetByIDTypeArgs = graphql.FieldConfigArgument{
		"id": &graphql.ArgumentConfig{
			Type: graphql.NewNonNull(graphql.Int),
		},
	}

	// ListTypeArgs ...
	ListTypeArgs = graphql.FieldConfigArgument{
		{{- range $field := $fields }}
			"{{ $field.Name | ToLowerCamelCase }}": &graphql.ArgumentConfig{
				Type:        {{ $field.GraphQLType }},
				Description: "{{ $field.GraphQLDescription }}",
			},
		{{- end }}
		"page": &graphql.ArgumentConfig{
			Type:        graphql.NewNonNull(graphql.Int),
			Description: "This is feature page",
		},
		"pageSize": &graphql.ArgumentConfig{
			Type:         graphql.Int,
			Description:  "This is feature pageSize",
			DefaultValue: 10,
		},
	}

	// InsertTypeArgs ...
	InsertTypeArgs = graphql.FieldConfigArgument{
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				"{{ $field.Name | ToLowerCamelCase }}": &graphql.ArgumentConfig{
					{{- if $field.GraphQLRequired }}
            Type:        graphql.NewNonNull({{ $field.GraphQLType }}),
          {{- else }}
            Type:        {{ $field.GraphQLType }},
          {{- end }}
					Description: "{{ $field.GraphQLDescription }}",
				},
			{{- end  }}
		{{- end }}
	}

	// UpdateTypeArgs ...
	UpdateTypeArgs = graphql.FieldConfigArgument{
		"id": &graphql.ArgumentConfig{
			Type: graphql.NewNonNull(graphql.Int),
		},
		{{- range $field := $fields }}
			{{- if not $field.IsIDField }}
				"{{ $field.Name | ToLowerCamelCase }}": &graphql.ArgumentConfig{
					Type:        {{ $field.GraphQLType }},
					Description: "{{ $field.GraphQLDescription }}",
				},
			{{- end  }}
		{{- end }}
	}

	// DeleteTypeArgs ...
	DeleteTypeArgs = graphql.FieldConfigArgument{
		"id": &graphql.ArgumentConfig{
			Type: graphql.NewNonNull(graphql.Int),
		},
	}
)

// ICoreHandler ...
type ICoreHandler interface {
	GetByID(ctx context.Context, param arguments.{{ $Name }}GetByIDArgs) (models.{{ $Name }}, error)
	GetByIDs(ctx context.Context, param arguments.{{ $Name }}GetByIDsArgs) ([]models.{{ $Name }}, error)
	Count(ctx context.Context, params arguments.{{ $Name }}CountArgs) (int64, error)
	List(ctx context.Context, params arguments.{{ $Name }}ListArgs) ([]models.{{ $Name }}, error)
	Insert(ctx context.Context, params arguments.{{ $Name }}InsertArgs) (models.{{ $Name }}, error)
	Update(ctx context.Context, params arguments.{{ $Name }}UpdateArgs) (models.{{ $Name }}, error)
	Delete(ctx context.Context, param arguments.{{ $Name }}DeleteArgs) (int64, error)
}

// ForwardParams ...
func (r *ResolverImpl) ForwardParams(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"TraceID": params.Context.Value("TraceID"),
		"params": params,
	}).Infof("Resolver ForwardParams of {{ $name }}")
	return params.Args, nil
}


// GetByID ...
func (r *ResolverImpl) GetByID(param graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"TraceID": param.Context.Value("TraceID"),
		"param": param,
	}).Infof("Resolver GetByID of {{ $name }}")
	// parse param
	args := arguments.{{ $Name }}GetByIDArgs{}
	if err := utils.Parse(param.Args, &args); err != nil {
		return nil, err
	}
	response, err := r.{{ $name }}.GetByID(param.Context, args)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// Count ...
func (r *ResolverImpl) Count(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"TraceID": params.Context.Value("TraceID"),
		"params": params,
	}).Infof("Resolver Count of {{ $name }}")
	// parse params
	args := arguments.{{ $Name }}CountArgs{}
	err := utils.Parse(params.Source.(map[string]interface{}), &args)
	if err != nil {
		return nil, err
	}
	response, err := r.{{ $name }}.Count(params.Context, args)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// List ...
func (r *ResolverImpl) List(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"TraceID": params.Context.Value("TraceID"),
		"params": params,
	}).Infof("Resolver List of {{ $name }}")
	// parse params
	args := arguments.{{ $Name }}ListArgs{}
	err := utils.Parse(params.Source.(map[string]interface{}), &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": params.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver List utils.Parse {{ $name }}")
		return nil, err
	}
	response, err := r.{{ $name }}.List(params.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": params.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver List r.{{ $name }}.List {{ $name }}")
		return nil, err
	}
	return response, nil
}

// Insert ...
func (r *ResolverImpl) Insert(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"TraceID": params.Context.Value("TraceID"),
		"params": params,
	}).Infof("Resolver Insert of {{ $name }}")
	// parse params
	args := arguments.{{ $Name }}InsertArgs{}
	err := utils.Parse(params.Args, &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": params.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver Insert utils.Parse {{ $name }}")
		return nil, err
	}
	response, err := r.{{ $name }}.Insert(params.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": params.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver Insert r.{{ $name }}.Insert {{ $name }}")
		return nil, err
	}
	return response, nil
}

// Update ...
func (r *ResolverImpl) Update(params graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"TraceID": params.Context.Value("TraceID"),
		"params": params,
	}).Infof("Resolver Update of {{ $name }}")
	// parse params
	args := arguments.{{ $Name }}UpdateArgs{}
	err := utils.Parse(params.Args, &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": params.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver Update utils.Parse {{ $name }}")
		return nil, err
	}
	response, err := r.{{ $name }}.Update(params.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": params.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver Update r.{{ $name }}.Update {{ $name }}")
		return nil, err
	}
	return response, nil
}

// Delete ...
func (r *ResolverImpl) Delete(param graphql.ResolveParams) (interface{}, error) {
  logger.WithFields(logger.Fields{
		"TraceID": param.Context.Value("TraceID"),
		"param": param,
	}).Infof("Resolver Delete of {{ $name }}")
	// parse param
	args := arguments.{{ $Name }}DeleteArgs{}
	err := utils.Parse(param.Args, &args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": param.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver Delete utils.Parse {{ $name }}")
		return nil, err
	}
	response, err := r.{{ $name }}.Delete(param.Context, args)
	if err != nil {
		logger.WithFields(logger.Fields{
			"TraceID": param.Context.Value("TraceID"),
			"Error": err,
		}).Errorf("Resolver Delete r.{{ $name }}.Delete {{ $name }}")
		return nil, err
	}
	return response, nil
}

//go:generate mockery -name=IHandler -output=mocks -case=underscore