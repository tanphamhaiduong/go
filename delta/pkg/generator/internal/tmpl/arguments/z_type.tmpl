// @generated
{{- $Name := .Module.Name }}
{{- $fields := .Module.Fields }}
package arguments

import (
	"context"
)

// {{ $Name }}GetByID ...
type {{ $Name }}GetByID struct {
	ID int64 `graphql:"id" validate:"required,min=1"`
}

// {{ $Name }}GetByIDs ...
type {{ $Name }}GetByIDs struct {
	IDs []int64 `graphql:"ids" validate:"required"`
}


// {{ $Name }}Count ...
type {{ $Name }}Count struct {
	ID int64 `graphql:"id" validate:"omitempty,min=1"`
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			{{ $field.Name }} {{ $field.GoType }} `graphql:"{{ $field.Name | ToLowerCamelCase }}" {{ $field.Validate }}`
		{{- end }}
	{{- end }}
}

// {{ $Name }}List ...
type {{ $Name }}List struct {
	ID int64 `graphql:"id" validate:"omitempty,min=1"`
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			{{ $field.Name }} {{ $field.GoType }} `graphql:"{{ $field.Name | ToLowerCamelCase }}" {{ $field.Validate }}`
		{{- end }}
	{{- end }}
	LastID int64 `graphql:"lastId"`
	PageSize int64 `graphql:"pageSize" validate:"required,min=1,max=40"`
}

// {{ $Name }}Insert ...
type {{ $Name }}Insert struct {
	{{- range $field := $fields }}
		{{- if not $field.IsIDField }}
			{{ $field.Name }} {{ $field.GoType }} `graphql:"{{ $field.Name | ToLowerCamelCase }}" {{ $field.Validate }}`
		{{- end }}
	{{- end }}
}

// {{ $Name }}Update ...
type {{ $Name }}Update struct {
	{{- range $field := $fields }}
		{{ $field.Name }} *{{ $field.GoType }} `graphql:"{{ $field.Name | ToLowerCamelCase }}" {{ $field.Validate }}`
	{{- end }}
}

// {{ $Name }}Delete ...
type {{ $Name }}Delete struct {
	ID int64 `graphql:"id" validate:"required,min=1"`
}
